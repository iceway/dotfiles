" vim: set expandtab tabstop=4 shiftwidth=4:

" @@@ VIM 配置（终端环境） @@@
" Author: Iceway Zhang
" Updated: 2021/06/08


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 备用选项，根据需要自行开启
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set relativenumber                 " 显示相对（当前光标所在行）行号而不是绝对行号
" set ignorecase                     " 搜索时大小写不敏感
" set nowrap                         " 长度超过窗口宽度不要换行显示
" set list                           " 让VIM显示空格、tab、换行等不可见字符
" set listchars=nbsp:¬,trail:·,tab:» " 设置VIM把空格、换行、tab显示为指定字符
" set shiftwidth=4                   " 设定VIM的自动缩进，以及>和<命令时移动的空白长度
" set softtabstop=4                  " 按下tab时，插入的是空格和tab制表符的混合
" set tabstop=4                      " 设定tab长度为4字节
" set expandtab                      " 键入tab时，自动用空格替换tab，空格长度等于tabstop的设置
" set showmode                       " 让VIM在窗口最低下显示当前模式，如--INSERT--等
" set autochdir                      " 自动切换当前工作路径。


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 设置vim基础选项
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible                " 不使用vi兼容模式
set encoding=utf-8              " 默认使用utf-8编码
set ruler                       " 显示状态栏光标标尺
set cursorline                  " 突出显示当前行（高亮当前行）
set number                      " 显示行号
set colorcolumn=100             " 在窗口100字符宽处显示一个竖线提示文本的推荐宽度。
set hlsearch                    " 高亮搜索结果
set incsearch                   " 输入搜索内容时就同步显示搜索结果
set scrolloff=3                 " 光标移动到顶部和底部时自动保持3行距离
set showmatch                   " 显示自动匹配到的对应括号
set showcmd                     " 在命令模式下输入命令时，同步显示已经键入的命令内容
set nobackup                    " 保存文件时，不要自动创建备份文件
set textwidth=0                 " 一行内输入字符达到多少时自动换行，0表示不限制
set history=500                 " 记录的历史命令个数
set backspace=indent,eol,start  " 退格键（backspace）默认工作在vi模式下。该设置修改退格键的模式。
                                " indent: 如果设置了:set indent等自动缩进，按退格键会删掉这个缩进。
                                " eol: 如果插入模式下在行开头，设置了eol后按下退格键会合并到上一行。
                                " start: 若不设置为start，则在回退时，只能回退删除自己新添加的字符，
                                " 原来已经存在的字符无法回退删除。
set pastetoggle=<F3>            " 按下F3键可以切换粘贴插入模式[Insert (paste)]和普通插入模式。
set viminfo='100,f1,<500        " 详见：https://vimjc.com/viminfo.html
set tags=./tags;,tags           " 查找ctags标签文件时，从当前目录一直往上查找。
set foldmethod=indent           " 设置折叠: manual, syntax, indent, diff
set nofoldenable                " 默认不要开启折叠


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 设置vim变量
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = "\\" " 设置反斜线作为<leader>键


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 设置vim按键映射
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 空格映射到打开/关闭折叠。
nnoremap <space> za

" 映射命令：输入`<leader>W`命令时以sudo权限保存文件。
nnoremap <leader>W :w !sudo tee >/dev/null %<CR>
" 映射命令：打开一个新的纵向分屏编辑vimrc配置文件。
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
" 映射命令：重新加载vimrc配置文件。
nnoremap <leader>sv :source $MYVIMRC<CR>

" ctags/cscope配置，需要系统安装了ctags，cscope软件。
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=1
    set cst
    set nocsverb
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
endif
nnoremap <F6> :!ctags -R<CR>:!cscope -Rbq<CR>:cs add cscope.out<CR>:cs reset <CR><CR>
nnoremap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nnoremap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nnoremap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nnoremap <F7> :Autoformat<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 设置vim自动执行命令
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 不重启VIM，让配置文件保存后立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" 打开文件后，自动跳转到上一次退出时所在行
autocmd BufReadPost *
            \ if line("'\"") > 1 && line("'\"") <= line("$") |
            \   exe "normal! g'\"" |
            \ endif

" 设置特定类型文件的缩进和对齐
"autocmd FileType python,php,ruby,go,sh,bash,conf,nginx setlocal et sta sw=4 sts=4
"autocmd FileType json,html,javascript,html,yml setlocal et sta sw=2 sts=2

" 打开后缀名为md的文件，将文件类型设置为markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd BufNewFile,BufReadPost *.h set filetype=c

" 启用VIM内置的man page reviewer，可以用命令`:Man XXX`查看手册页
runtime! ftplugin/man.vim


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM插件详细配置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 配色方案配置(如果终端不支持斜体字显示，将下面两行注释)
let g:monokai_term_italic = 1
let g:gruvbox_italic = 1

" vim-airline配置
set laststatus=2
let g:airline_theme='simple'
let g:airline#extensions#tabline#enabled = 1

" ultisnips配置
let g:UltiSnipsExpandTrigger = "<C-j>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"

" YouCompleteMe配置
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_use_clangd = 1
let g:ycm_clangd_binary_path = "~/.vim/plugs/YouCompleteMe/third_party/ycmd/third_party/clangd/output/bin/clangd"
let g:ycm_show_diagnostics_ui = 0
let g:ycm_confirm_extra_conf = 0
let g:ycm_collect_identifier_from_comments_and_strings = 0
let g:ycm_complete_in_strings = 1
let g:ycm_complete_in_comments = 1
set completeopt=menu,menuone
let g:ycm_semantic_triggers = {
            \ 'c,cpp,python,java,go': ['re!\w{2}'],
            \ 'cs,lua,javascript,sh': ['re!\w{2}']
            \ }
let g:ycm_filetype_whitelist = {
            \ "c":1, "cpp":1, "h":1, "sh":1, "zsh":1,
            \ "python":1, "vim":1, "go":1, "javascript":1, "lua":1
            \ }

" ale配置
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
let g:ale_linters_explicit = 1
let g:ale_linters = {
            \   'sh': ['shellcheck'],
            \   'csh': ['shell'],
            \   'zsh': ['shell'],
            \   'go': ['gofmt', 'golint'],
            \   'python': ['flake8', 'mypy', 'pylint'],
            \   'c': ['gcc', 'cppcheck'],
            \   'cpp': ['gcc', 'cppcheck'],
            \   'text': [],
            \}
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_open_list = 1
let g:ale_c_cc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_cc_options = '-Wall -O2 -std=c++11'
let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++11'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
let g:ale_c_parse_makefile = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" vim-autoformater配置，针对C语言需要系统安装了astyle
"let g:autoformat_autoindent = 0
"let g:autoformat_retab = 0
"let g:autoformat_remove_trailing_spaces = 0
let g:autoformat_verbosemode=1
let g:formatdef_astyle = '"astyle -A8 -s4 -xC100 -p -k3 -W3 -j"'
let g:formatters_cpp = ['astyle']
let g:formatters_c = ['astyle']
let g:formatdef_shfmt = '"shfmt -bn -fn"'
let g:formatters_sh = ['shfmt']
let g:formatdef_black = '"black -q -l 100 -"'
let g:formatters_python = ['black']

" indentLine配置
let g:indentLine_char='┆'
let g:indentLine_enabled = 1
let g:indentLine_color_term = 239

" vim-markdown配置
" let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0

" vim-polyglot配置
let g:polyglot_disabled = ['autoindent']
let g:polyglot_disabled = ["sensible"]

" the-nerd-tree配置
nmap <F2> :NERDTreeToggle<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM插件：使用vim-plug 管理插件
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 启动vim时判断vim-plug插件管理器是否已安装，如没有则通过curl下载vim-plug。
let iCanHazPlug=1
let plug_file=expand('~/.vim/autoload/plug.vim')
if !filereadable(plug_file)
    echo "Installing vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload/
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let iCanHazPlug=0
endif

call plug#begin('~/.vim/plugs')

Plug 'crusoexia/vim-monokai'          " 配色方案monokai
Plug 'morhetz/gruvbox'                " 配色方案gruvbox
Plug 'vim-airline/vim-airline'        " 状态栏样式和配色
Plug 'vim-airline/vim-airline-themes' " 提供大量vim-airline配色方案
Plug 'SirVer/ultisnips'               " 代码块补全引擎
Plug 'honza/vim-snippets'             " 提供大量适用于ultisnips的代码块
Plug 'Valloric/YouCompleteMe'         " 基于语义的代码自动补全
Plug 'dense-analysis/ale'             " 各文件类型的语法实时检查
Plug 'Chiel92/vim-autoformat'         " 自动格式化代码
Plug 'easymotion/vim-easymotion'      " 快速移动
Plug 'tpope/vim-fugitive'             " git集成插件
Plug 'lilydjwg/colorizer'             " 颜色代码值（#XXXXXX）直接显示色彩
Plug 'sheerun/vim-polyglot'           " 支持大多数语言的语法高亮插件
Plug 'guns/xterm-color-table.vim'     " 查看终端256色，命令:XtermColorTable
Plug 'Yggdroot/indentLine'            " 显示不同级别的缩进
Plug 'tell-k/vim-autopep8'            " 基于PEP8格式化python代码，命令:Autopep8
Plug 'godlygeek/tabular'              " 按照指定的符号对齐（方便整理注释）
Plug 'plasticboy/vim-markdown'        " markdown插件
Plug 'scrooloose/nerdtree'            " 浏览文件夹目录数
Plug 'scrooloose/nerdcommenter'       " 自动注释插件
Plug 'ntpeters/vim-better-whitespace' " 高亮空白
Plug 'dhruvasagar/vim-table-mode'     " vim字符表格，创建&格式化

" 安装了vim-plug后，首次自动安装插件
if iCanHazPlug == 0
    echo "Installing plugins, please ignore key map error messages"
    echo ""
    :PlugInstall
endif

" 所有插件需要在下面这行之前引入
call plug#end()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 下面的选项建议在插件之后
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 开启语法高亮显示
syntax on

" 启用true color（vim >= 7.4.1770)，或者设置256colors
if has("termguicolors")
    set t_8f=[38;2;%lu;%lu;%lum
    set t_8b=[48;2;%lu;%lu;%lum

    set termguicolors " 支持24位真色彩
elseif &term =~ "256color"
    set t_Co=256 " 支持256色
endif

" 设置色彩空间为暗色调，使用monokai配色方案
colorscheme monokai
set background=dark

" 设置当前行高亮，加粗，显示下划线
set cursorline
hi CursorLine cterm=bold,underline

" 设置PopWindow前景和背景色
" hi Pmenu term=standout ctermfg=0 ctermbg=11 guifg=Black guibg=LightYellow
" hi PmenuSel term=bold,reverse cterm=bold ctermfg=0 ctermbg=121 gui=bold guifg=bg guibg=LightGreen
set listchars=tab:»‥
hi SpecialKey ctermfg=77 guifg=#654321
set list

" fix: redrawtime' exceeded, syntax highlighting disabled
" https://github.com/fatih/vim-go/issues/3171#issuecomment-804226692
set re=1
